# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FRI7qomK-YvpjdWfFswIMQd_6uRr_VLj
"""

import torch 

input=torch.tensor([1.,2.,3.,4.])
weights=torch.randn(4,requires_grad=True)
ytrue=4

def forward(weights,input):
  return (weights*input).sum()

def loss(yhat):
  return (ytrue-yhat)**2



for i in range(100):
    yhat=forward(weights,input)
    loss_val=loss(yhat)
    loss_val.backward()
    with torch.no_grad():
      weights.sub_(weights.grad * 0.001)

    print(" predicted value = {}    actual value ={}        loss = {} % ".format(yhat,ytrue,loss_val*100))

    weights.grad.zero_()